dnl $Id: configure.in,v 1.72 2004/08/02 01:02:20 krzyzak Exp $

m4_define([gg2_version],[2.0.3])

AC_INIT(gg2,[gg2_version])
AM_INIT_AUTOMAKE([gg2],[gg2_version])
AM_CONFIG_HEADER(config.h)
AC_DEFINE_UNQUOTED(VERSION, "$VERSION")
AC_DEFINE_UNQUOTED(PACKAGE, "$PACKAGE")
AC_SUBST(PACKAGE)
AC_SUBST(VERSION)

AC_PROG_CPP
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LN_S

AC_DEFINE_UNQUOTED(INSTALLPREFIX, "${prefix}")

AC_PATH_PROG(GMAKE, gmake, no)

if test "x$GMAKE" = "xno"; then
	AC_PATH_PROG(MAKE, make, no)

	if test "x$MAKE" = "xno"; then
		AC_MSG_ERROR([make ])
	fi
else
	MAKE="$GMAKE"
fi

AC_DISABLE_STATIC
AC_LIBTOOL_DLOPEN
AM_PROG_LIBTOOL
AC_SUBST(LIBTOOL_DEPS)
AC_PROG_MAKE_SET
AC_PROG_AWK

LIBTOOL="$LIBTOOL --silent"

AC_HEADER_STDC
AC_STDC_HEADERS

AC_C_CONST
AC_STRUCT_TM
AC_C_BIGENDIAN
dnl AC_CHECK_HEADERS(asm/byteorder.h byteswap.h endian.h machine/endian.h arpa/nameser_compat.h)
dnl AC_CHECK_FUNCS(bswap_32 bswap_16)

AC_TYPE_SIGNAL
AC_FUNC_STRFTIME
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([memset mkdir strcasecmp strchr strlen])


AC_CHECK_HEADERS(libintl.h)
ALL_LINGUAS="pl nl"
AM_GNU_GETTEXT([use-libtool])

AM_PROG_LIBTOOL
AM_MAINTAINER_MODE

if test "x$GCC" = "xyes"; then
   CFLAGS="$CFLAGS -Wall -Wno-uninitialized -Wchar-subscripts -Wnested-externs -Wpointer-arith -Wno-sign-compare"
fi

PKG_CONFIG_PATH="$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig"

AC_PATH_PROG(PKG_CONFIG, pkg-config, no)

if test "x$PKG_CONFIG" = "xno"; then
	AC_MSG_ERROR([pkgconfig ])
fi

PKG_CHECK_MODULES(GLIB,glib-2.0 >= 2.2.0,[
   CFLAGS="$CFLAGS $GLIB_CFLAGS"
   LDFLAGS="$LDFLAGS $GLIB_LIBS"
    ],AC_MSG_ERROR($GLIB_PKG_ERRORS))

PKG_CHECK_MODULES(GTHREAD,gthread-2.0 >= 2.2.0,[
   CFLAGS="$CFLAGS $THREAD_CFLAGS"
   LDFLAGS="$LDFLAGS $GTHREAD_LIBS"
    ],AC_MSG_ERROR($GLIB_PKG_ERRORS))

AC_ARG_ENABLE(debug, [  --enable-debug	  debug mode			default=disabled],
    if test x$enableval = xyes; then
	 want_debug=yes
    else
	if test "x$enableval" = xno; then
		want_debug=no
	else
		want_debug=yes
	fi
    fi,
    want_debug=no)

if test x$want_debug = xyes; then
  AC_DEFINE(GGADU_DEBUG)
fi


AC_ARG_ENABLE(gdb, [  --enable-gdb		  gdb support			default=disabled],
    if test x$enableval = xyes; then
	 want_gdb=yes
    else
	if test "x$enableval" = xno; then
		want_gdb=no
	else
		want_gdb=yes
	fi
    fi,
    want_gdb=no)


if test x$want_gdb = xyes; then
 CFLAGS="$CFLAGS -ggdb"
fi

want_gui=no
want_gghist=no
want_gtkspell=no
want_gadu=no
want_tlen=no
want_jabber=no
want_xosd=no
want_sms=no
want_remote=no
want_esd=no
want_oss=no
want_arts=no
want_external=no
want_history_external_viewer=no
want_update=no
want_docklet_system_tray=no
want_docklet_dockapp=no
want_perl=no

AC_ARG_WITH(all_plugins, [  --with-all-plugins	  Build all plugins with all features		default=no])
if test x$with_all_plugins = xyes; then
    with_gui=yes
    with_gghist=yes
    with_gtkspell=yes
    with_gadu=yes
    with_tlen=yes
    with_jabber=yes
    with_xosd=yes
    with_esd=yes
    with_oss=yes
    with_arts=yes
    with_sms=yes
    with_remote=yes
    with_external=yes
    with_history_external_viewer=yes
    with_update=yes
    with_docklet_system_tray=yes
    with_docklet_dockapp=yes
#    with_perl=yes
fi

AC_ARG_WITH(perl, [  --with-perl		  perl support			default=disabled])
if test x$with_perl = xyes; then
    want_perl=yes
    AC_PATH_PROG(perlpath, perl)
    AC_PATH_PROG(sedpath, sed)
    AC_MSG_CHECKING(for Perl compile flags)
    PERL_CFLAGS=`$perlpath -MExtUtils::Embed -e ccopts 2>/dev/null`
    if test "_$PERL_CFLAGS" = "_"; then
        AC_MSG_RESULT([not found, building without perl.])
	want_perl=no
    else
	PERL_LDFLAGS=`$perlpath -MExtUtils::Embed -e ldopts`
	AC_MSG_RESULT(ok)

        oldLIBS=$LIBS
        PERL_OPTION_LIBS="$LIBS $PERL_LDFLAGS"
	AC_CHECK_FUNCS(eval_pv)
        PERL_OPTION_LIBS=$oldLIBS
        PERL_OPTION_CFLAGS="$CFLAGS $PERL_CFLAGS"
        PERL_OPTION_LDFLAGS="$LDFLAGS $PERL_LDFLAGS"
        AC_DEFINE(PERL_EMBED)
        AC_SUBST(PERL_OPTION_LIBS)
        AC_SUBST(PERL_OPTION_CFLAGS)
        AC_SUBST(PERL_OPTION_LDFLAGS)
        CFLAGS="$CFLAGS $PERL_OPTION_CFLAGS"
    fi
fi

dnl if test "x$with_perl" = "xyes"; then
dnl       PERL_LDFLAGS=`$perlpath -MExtUtils::Embed -e ldopts |$sedpath 's/-lgdbm //'`
dnl       PERL_LDFLAGS=`echo $PERL_LDFLAGS |$sedpath 's/-ldb //'`
dnl       PERL_LDFLAGS=`echo $PERL_LDFLAGS |$sedpath 's/-lndbm //'`
dnl       PERL_LDFLAGS=`echo $PERL_LDFLAGS |$sedpath 's/-lnsl //'`
dnl       PERL_LDFLAGS=`echo $PERL_LDFLAGS |$sedpath 's/-lposix //'`
dnl       PERL_LDFLAGS=`echo $PERL_LDFLAGS |$sedpath 's/-lc //'`
dnl fi

AC_ARG_WITH(gghist, [  --with-gghist		  Build gghist		default=no])
if test "x$with_gghist" = "xyes"; then 
    want_gghist=yes
    PKG_CHECK_MODULES(GTK,gtk+-2.0 >= 2.2.0,[],AC_MSG_ERROR($GTK_PKG_ERRORS))
    AC_SUBST(GTK_CFLAGS)
    AC_SUBST(GTK_LIBS)
fi

AC_ARG_WITH(gui, [  --with-gui		  Build gtk2 GUI plugin		default=no])
if test "x$with_gui" = "xyes"; then 
    want_gui=yes
    PKG_CHECK_MODULES(GTK,gtk+-2.0 >= 2.2.0,[],AC_MSG_ERROR($GTK_PKG_ERRORS))
    AC_SUBST(GTK_CFLAGS)
    AC_SUBST(GTK_LIBS)
fi

AC_ARG_WITH(gtkspell, [  --with-gtkspell	  Build GUI plugin with gtkspell support 	default=no])
if test "x$with_gtkspell" = "xyes"; then 
    want_gtkspell=yes
    PKG_CHECK_MODULES(GTKSPELL,gtkspell-2.0 >= 2.0.0,[],want_gtkspell=no)
    if test "$want_gtkspell" = "no"; then 
    	AC_MSG_WARN([*** gtkspell support has been disabled ***])
    fi
    AC_SUBST(GTKSPELL_CFLAGS)
    AC_SUBST(GTKSPELL_LIBS)
fi

AC_ARG_WITH(gadu, [  --with-gadu		  Build gadu-gadu plugin	default=no])
AC_ARG_WITH(external_libgadu, [  --with-external-libgadu	Build gadu-gadu plugin with external libgadu default=no])

want_external_libgadu=no
if test "x$with_external_libgadu" = "xyes"; then 
    PKG_CHECK_MODULES(LIBGADU,libgadu,want_external_libgadu=yes,AC_MSG_ERROR($GTK_PKG_ERRORS))
    AC_SUBST(LIBGADU_CFLAGS)
    AC_SUBST(LIBGADU_LIBS)
fi

AM_CONDITIONAL(EXTERNAL_LIBGADU, test "$want_external_libgadu" = "yes")

if test "x$with_gadu" = "xyes"; then 
    want_gadu=yes
    if test "x$want_external_libgadu" = "xno"; then
    
	
	if test "x$without_openssl" != "xyes"; then
	
	    AC_CHECK_OPENSSL
	    
	    if test "x$have_openssl" = "xno"; then
		AC_MSG_ERROR([unable to find openssl required for included libgadu])
	    fi
	    
	    AC_SUBST(OPENSSL_LIBS)
	    AC_SUBST(OPENSSL_INCLUDES)
	fi
	AC_CONFIG_SUBDIRS([src/plugins/gadu_gadu/libgadu])
	
    fi
fi

AC_ARG_WITH(tlen, [  --with-tlen		  Build tlen plugin		default=no])
if test "x$with_tlen" = "xyes"; then 
    AC_CHECK_LIB([tlen], [tlen_set_hub_blocking], want_tlen=yes, want_tlen=no)
    if test "x$want_tlen" != "xno"; then
	AC_CHECK_HEADERS(libtlen/libtlen.h)
	TLEN_LIBS="-ltlen -lm"
	AC_SUBST(TLEN_LIBS)
    fi
fi

AC_ARG_WITH(jabber, [  --with-jabber		  Build jabber plugin		default=no])
if test "x$with_jabber" = "xyes"; then 
    want_jabber=yes
    PKG_CHECK_MODULES(JABBER,loudmouth-1.0 >= 0.16, [],want_jabber=no)
    if test "$want_jabber" = "no"; then 
    	AC_MSG_WARN($JABBER_PKG_ERRORS)
	echo
	echo "**********************************************************"
	echo 
	echo "Jabber plugin has been disabled!"
	echo "You don't have loudmouth installed (or you have wrong version)"
	echo "Please download loudmouth: http://www.imendio.com/projects/loudmouth/"
	echo 
	echo "**********************************************************"
	echo

    fi
    AC_SUBST(JABBER_LIBS)
    AC_SUBST(JABBER_CFLAGS)
fi

AC_ARG_WITH(xosd, [  --with-xosd		  Build XOSD plugin		default=no])
if test "x$with_xosd" = "xyes"; then 
    AC_PATH_PROG(xosd_config_script, xosd-config, "none")
    
    if test "x$xosd_config_script" != "xnone"; then
	AC_CHECK_LIB([xosd], [xosd_display], want_xosd=yes, want_xosd=no, `$xosd_config_script --libs`)

	if test "x$want_xosd" != "xno"; then

	    XOSD_CFLAGS=`$xosd_config_script --cflags`
	    XOSD_LIBS=`$xosd_config_script --libs`
    
	    AC_CHECK_HEADERS(xosd.h)

	    AC_SUBST(XOSD_LIBS)
	    AC_SUBST(XOSD_CFLAGS)
	fi
    else
	want_xosd=no
    fi
fi

AC_ARG_WITH(sms, [  --with-sms		  Build sms plugin		default=no])
if test "x$with_sms" = "xyes"; then 
	want_sms=yes
    else
	want_sms=no
fi

AC_ARG_WITH(remote, [  --with-remote		  Build remote plugin		default=no])
if test "x$with_remote" = "xyes"; then 
	want_remote=yes
	else
	want_remote=no
fi


AC_ARG_WITH(docklet_system_tray, [  --with-docklet-system-tray	  Build docklet plugin		default=no])
if test "x$with_docklet_system_tray" = "xyes"; then 
    want_docklet_system_tray=yes
    PKG_CHECK_MODULES(GTK,gtk+-2.0 >= 2.2.0, [], want_docklet_system_tray=no)
    if test "$want_docklet_system_tray" = "no"; then 
    	AC_MSG_WARN($GTK_PKG_ERRORS)
    fi
    AC_SUBST(GTK_CFLAGS)
    AC_SUBST(GTK_LIBS)
else
    want_docklet_system_tray=no
fi

AC_ARG_WITH(docklet_dockapp, [  --with-docklet-dockapp	  Build dockapp plugin		default=no])
if test "x$with_docklet_dockapp" = "xyes"; then 
    want_docklet_dockapp=yes
    PKG_CHECK_MODULES(GTK,gtk+-2.0 >= 2.2.0, [], want_docklet_dockapp=no)
    if test "$want_docklet_dockapp" = "no"; then 
    	AC_MSG_WARN($GTK_PKG_ERRORS)
    fi
    AC_SUBST(GTK_CFLAGS)
    AC_SUBST(GTK_LIBS)
else
    want_docklet_dockapp=no
fi

AC_ARG_WITH(esd, [  --with-esd		  Build esd sound plugin	default=no])
if test "x$with_esd" = "xyes"; then
    have_libesd=no
    AM_PATH_ESD(0.2.7 ,have_libesd=yes,
    [AC_MSG_WARN([*** sound support for esd has been disabled ***])])
    
    if test "$have_libesd" = yes; then
	AC_SUBST(ESD_CFLAGS)
	AC_SUBST(ESD_LIBS)
	want_esd=yes
    else
	want_esd=no
    fi
fi

AC_ARG_WITH(arts, [  --with-arts		  Build aRts! sound plugin	default=no])
AC_ARG_WITH(arts-prefix, [  --with-arts-prefix=PREFIX	Prefix where aRts! is installed (optional)], arts_prefix="$withval", arts_prefix="")
if test "x$with_arts" = "xyes"; then 
    AC_PROG_CXX
    if test "$arts_prefix" != ""; then
	arts_include_path="-I$arts_prefix/include"
	arts_libs_path="-L$arts_prefix/lib"
    fi
    
    have_arts=no
    CFLAGS="$CFLAGS $arts_include_path"
    CPPFLAGS="$CPPLAGS $arts_include_path"
    AC_CHECK_HEADERS(arts/artsversion.h, have_arts=yes,
    [AC_MSG_WARN([*** sound support for aRts! has been disabled ***])],-)

    if test "x$have_arts" = "xyes"; then
        ARTS_CXXFLAGS="$CXXFLAGS $arts_include_path"
	ARTS_LIBS="-lartsflow -lartswavplayobject $arts_libs_path"
	AC_SUBST(ARTS_LIBS)
	AC_SUBST(ARTS_CXXFLAGS)
	AC_SUBST(CXX, $CC)
	AC_SUBST(CXXFLAGS)
	want_arts=yes
    fi
else
    AM_CONDITIONAL(am__fastdepCXX, test yes = "$want_arts")
    want_arts=no
fi

AC_ARG_WITH(oss, [  --with-oss		  Build OSS sound plugin	default=no])
if test "x$with_oss" = "xyes"; then
    have_soundcardh=no
    AC_CHECK_HEADERS(sys/soundcard.h, have_soundcardh=yes, have_soundcardh=no)
    if test "$have_soundcardh" = yes; then
	want_oss=yes
    else
	want_oss=no
    fi
fi

AC_ARG_WITH(external, [  --with-external	  Build external player sound plugin	default=no])
if test "x$with_external" = "xyes"; then
    want_external=yes
fi

AC_ARG_WITH(history_external_viewer, [  --with-history-external-viewer	  Build external history plugin	default=no])
if test "x$with_history_external_viewer" = "xyes"; then
    want_history_external_viewer=yes
fi

AC_ARG_WITH(update, [  --with-update		  Build update plugin		default=no])
if test "x$with_update" = "xyes"; then 
	want_update=yes
	else
	want_update=no
fi

AM_CONDITIONAL(BUILD_GGHIST, test "$want_gghist" = "yes")
AM_CONDITIONAL(BUILD_GUI, test "$want_gui" = "yes")
AM_CONDITIONAL(USE_GTKSPELL, test "$want_gtkspell" = "yes")
AM_CONDITIONAL(BUILD_GG, test "$want_gadu" = "yes")
AM_CONDITIONAL(BUILD_TLEN, test "$want_tlen" = "yes")
AM_CONDITIONAL(BUILD_JABBER, test "$want_jabber" = "yes")
AM_CONDITIONAL(BUILD_XOSD, test "$want_xosd" = "yes")
AM_CONDITIONAL(BUILD_DOCKLET_SYSTEM_TRAY, test "$want_docklet_system_tray" = "yes")
AM_CONDITIONAL(BUILD_DOCKLET_DOCKAPP, test "$want_docklet_dockapp" = "yes")
AM_CONDITIONAL(BUILD_SOUND_ESD, test "$want_esd" = "yes")
AM_CONDITIONAL(BUILD_SOUND_ARTS, test "$want_arts" = "yes")
AM_CONDITIONAL(BUILD_SOUND_OSS, test "$want_oss" = "yes")
AM_CONDITIONAL(BUILD_SOUND_EXTERNAL, test "$want_external" = "yes")
AM_CONDITIONAL(BUILD_HISTORY_EXTERNAL_VIEWER_PLUGIN, test "$want_history_external_viewer" = "yes")
AM_CONDITIONAL(BUILD_SMS, test "$want_sms" = "yes")
AM_CONDITIONAL(BUILD_REMOTE, test "$want_remote" = "yes")
AM_CONDITIONAL(BUILD_UPDATE, test "$want_update" = "yes")

dnl Set PACKAGE_DATA_DIR in config.h.
if test "x${datadir}" = 'x${prefix}/share'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${ac_default_prefix}/share/${PACKAGE}")
  else
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/share/${PACKAGE}")
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${datadir}/${PACKAGE}")
fi

dnl Set PACKAGE_LOCAL_DIR in config.h.
if test "x${datadir}" = 'x${prefix}/share'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${ac_default_prefix}/share/locale")
  else
    AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${prefix}/share/locale")
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${datadir}/locale")
fi


dnl Set PACKAGE_SOURCE_DIR in config.h.
packagesrcdir=`cd $srcdir && pwd`
AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR, "${packagesrcdir}")

CFLAGS_CLEAN="$CFLAGS"
CFLAGS="$CFLAGS -I${packagesrcdir}/lib"
 
AC_SUBST(CFLAGS)
AC_SUBST(CFLAGS_CLEAN)
AC_SUBST(LDFLAGS)


AC_SUBST_FILE(gg2_menu)
gg2_menu=$srcdir/lib/ggadu_menu.h
AC_SUBST_FILE(gg2_types)
gg2_types=$srcdir/lib/ggadu_types.h
AC_SUBST_FILE(gg2_plugins)
gg2_plugins=$srcdir/lib/plugins.h
AC_SUBST_FILE(gg2_conf)
gg2_conf=$srcdir/lib/ggadu_conf.h
AC_SUBST_FILE(gg2_repo)
gg2_repo=$srcdir/lib/ggadu_repo.h
AC_SUBST_FILE(gg2_signals)
gg2_signals=$srcdir/lib/signals.h
AC_SUBST_FILE(gg2_dialog)
gg2_dialog=$srcdir/lib/ggadu_dialog.h
AC_SUBST_FILE(gg2_support)
gg2_support=$srcdir/lib/ggadu_support.h
AC_SUBST_FILE(gg2_perl_embed)
gg2_perl_embed=$srcdir/lib/perl_embed.h


AC_OUTPUT([ 
intl/Makefile 
m4/Makefile 
po/Makefile.in
Makefile
lib/Makefile
lib/gg2_core.pc
lib/gg2_core.h
contrib/Makefile
contrib/gghist/Makefile
src/Makefile
src/plugins/Makefile
src/plugins/GUI/Makefile
src/plugins/gadu_gadu/Makefile
src/plugins/tlen/Makefile
src/plugins/jabber/Makefile
src/plugins/xosd/Makefile
src/plugins/docklet/Makefile
src/plugins/docklet/system-tray/Makefile
src/plugins/docklet/dockapp/Makefile
src/plugins/sound/Makefile
src/plugins/sound/esd/Makefile
src/plugins/sound/arts/Makefile
src/plugins/sound/oss/Makefile
src/plugins/sound/external/Makefile
src/plugins/sms/Makefile
src/plugins/remote/Makefile
src/plugins/update/Makefile
src/plugins/history/Makefile
src/plugins/history/external/Makefile
pixmaps/Makefile
pixmaps/emoticons/Makefile
pixmaps/icons/Makefile
pixmaps/icons/bubble/Makefile
pixmaps/icons/classic/Makefile
pixmaps/icons/ghosts/Makefile
pixmaps/icons/modern/Makefile
pixmaps/icons/rozgwiazda/Makefile
pixmaps/icons/tlen-3d/Makefile
sounds/Makefile
themes/Makefile
])

# sed -e 's/#include \"ggadu_types.h\"//g' $srcdir/lib/gg2_core.h > $srcdir/lib/gg2_core.h-
# mv -f $srcdir/lib/gg2_core.h- $srcdir/lib/gg2_core.h


echo
echo Build plugin GUI-GTK2.................. : $want_gui
echo Build plugin GUI with gtkspell support. : $want_gtkspell
echo Build plugin Gadu-Gadu................. : $want_gadu
echo Build plugin Tlen.pl................... : $want_tlen
echo Build plugin Jabber.................... : $want_jabber
echo Build plugin docklet-system-tray....... : $want_docklet_system_tray
echo Build plugin docklet-dockapp........... : $want_docklet_dockapp
echo Build plugin XOSD...................... : $want_xosd
echo Build plugin sound ESD................. : $want_esd
echo Build plugin sound aRts................ : $want_arts
echo Build plugin sound OSS................. : $want_oss
echo Build plugin sound external............ : $want_external
echo Build plugin sms....................... : $want_sms
echo Build plugin remote.................... : $want_remote
echo Build plugin update.................... : $want_update
echo Build plugin external history viewer... : $want_history_external_viewer
echo Build gghist - history viewer.......... : $want_gghist
echo Build with perl support................ : $want_perl
echo
echo "*************************************************************"
echo Remember that GNU Gadu 2 built without any plugin, 
echo especially without gui plugin is probably useless for you!
echo Check \"./configure --help\" to see how to enable some plugins
echo
echo You may enable all plugins with:
echo \"./configure --with-all-plugins\"
echo "*************************************************************"
echo Please check README file for requirements !!!
echo "*************************************************************"
echo
echo configure complete, now type \"make\"
echo
