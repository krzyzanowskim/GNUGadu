	    JAK NAPISAC SWOJ WLASNY PLUGIN

1.Trzeba wiedziec ze :

1.1. Ladowane sa podczas ladowania (moze kiedys bedzie inaczej)
1.2. Znajdowac sie powinny w katalogu $HOME/$CONFIG_DIR/gg/modules lub $HOME/.gg/modules oraz zakonczone na ".so"


2. Podstawowa konstrukcja pliku 

2.1. Naglowek pliku powinien wygladac przynajmniej tak :

    #include "../gg-types.h"
    #include "../plugins.h"
    #include "../signals.h"
    #include "../support.h"



2.2. Nastepnie nalezy wywolac makro :

    GGadu_PLUGIN_INIT( "main-gui", GGadu_PLUGIN_TYPE_GUI );

    Pierwszy argument to nazwa pluginu, drugi to typ.
    !!! UWAGA: wszelkie zmienne globalne powinny byc zadeklarowane przed tym makrem.
    
    
    
    
2.3 GGaduPlugin *initialize_plugin(gpointer conf_ptr) 
    Jest wywolywane zaraz po zaladowaniu pluginu. Powinna rejestrowac plugin w programie:
    
    =DEKLARACJA
    =konieczna deklaracja

	GGaduPlugin *initialize_plugin(gpointer conf_ptr) {
	
	
    =AKTYWACJA
    =makro aktywuje plugin (KONIECZNIE W TYM MIEJSCU)
    
    	    GGadu_PLUGIN_ACTIVATE(conf_ptr);
	    

    =REGISTER PLUGIN
    =funkcja tworzy plugin i zwraca uchwyt do pluginu ktory czesto bedzie wykozystywany
    
	    gui_handler = (GGaduPlugin *)register_plugin(GGadu_PLUGIN_NAME, "opis");
	    

    =REGISTER SIGNAL RECEIVER
    =rejestruje funkcje ktora bedzie odbierala zdarzenia od innych pluginow
    
	    register_signal_receiver((GGaduPlugin *)gui_handler, (signal_func_ptr)gui_signal_receive);
	    

    =REGISTER SIGNAL
    =rejestruje obsluge signala. Mowi programowi ze ten plugin jest w stanie obslugiwac signal "gui register menu"
    =oraz wskazuje na funkcje grm_free(gpointer signal) ktora odpowiada za zwalnianie pamieci po wywolaniu takiego signala
	
	    register_signal(gui_handler,"gui register menu",grm_free);
	    

    =RETURN
    =funkcja musi zwracac stworzony handler plugina
    
	    return gui_handler;
	}


2.4 void start_plugin()
    =Wywo³ywana po inicjalizacji danego pluginu. Nie musi byc obecna, lecz dla porz±dku
    =powinno siê j± wykorzystywaæ do "startowania" wtyczki.
    
2.5 void destroy_plugin()
    =Wywolywana podczas odladowywania pluginu. Powinna zawierac zwalnianie pamieci zaalokowanej przez plugin.
    

2.6 void gui_signal_receive(gpointer name, gpointer signal_ptr)

    =Otrzymuje signale wyslane do tego pluginu, i powinna zawierac och obsluge.
    =name 	- (gchar *) 		- zawiera nazwe signala
    =signal_ptr - (GGaduSignal *) 	- wskaznik do struktury zawierajacej dane towarzyszace pluginowi.




3. Obecnie mozna kozystac z nastepujacych funkcji oraz makr (aktualne dane mozna sprawdzic w plikach plugins.h, signals.h, support.h)
    
3.1 =GGadu_PLUGIN_NAME
    =makro ktore zwraca nazwe aktualnie uzywanego pluginu

3.2 =SIGNAL EMIT
    =sluzy do "emisji" signala np:
    
	gpointer signal_emit(GGadu_PLUGIN_NAME,"gui register menu",gui_menu_tmp,"main-gui");

	=Przesle signal "gui register menu" z danym "gui_menu_tmp" do pluginu o nazwie "main-gui".
	=Jesli nazwa docelowego pluginy == NULL wtedy signal jest rozsylany do wszystkicj zaladowanych obecnie
	=pluginow z pominieciem pluginu wysylajacego.
	
	= UWAGA : ostatni parametr moze byc podany w postaci wzoru (pattern) np, "sound*" bedzie to tyczylo
	= wszystkich signali o nazwie soundDOWOLNEZNAKI np. "sound-esd" "sound-oss" itp.
	
	= UWAGA : Funkcja moze zwracac wartosc jednak w przypadku wywolania wewnatrz initialize_plugin lub start_plugin
	= zawsze zwroci NULL, nie mozna tez na te wlasciwosc liczyc w przypadku uzywania podania pluginu
	= docelowego jako wzoru (pattern)



4. Jesli chcesz zeby plugin korzystal z danych zawartych w pliku konfiguracyjnym musisz :

4.1 =Ustalic plik :

	    set_config_file_name((GGaduPlugin *)handler, "/path/to/cofnigdir/dummy_config");
	    
    =Oznacza to ze plik /path/to/configdir/dummy_config bedzie zawieral deklaracje obslugiwanych zmiennych

    =Okrelic jakie zmienne maja byz zczytane z pliku np.:    
	config_var_add(plugin_handler, "uin",		VAR_INT);
    	config_var_add(plugin_handler, "password",	VAR_STR);
    	config_var_add(plugin_handler, "dummy",		VAR_INT);

    Zmienne w pliku konfiguracyjnym powinny mieæ format:
	<nazwa> <warto¶æ>
    
    =Wywolac funkcje :
	config_read( (GGaduPlugin *)plugin_handler)
	
	- najwygodniej zrobic to wewnatrz initialize_plugin();
	
	- funkcja config_save( (GGaduPlugin *)plugin_handler) zapisuje konfiguracje

4.2 Aby odczytac wartosc przeczytanego parametru nalezy wywolac :

	    foo = config_var_get(plugin_handler,"uin");
	    
	- Mozna tez sprawdzic typ zmiennej poprzez
	
	    typ = config_var_get_type(plugin_handler,"uin"); (w tym przypadku zwrocic powinno VAR_INT)

4.3 Aby ustawic wartosc parametru nalezy wywolac :

	    config_var_set(plugin_handler, "uin",wartosc);
	    
4.4 Aby sprawdzic czy jakas zmienna jest zadeklarowana

	    config_var_check(plugin_handler,"uin");
	    
	    UWAGA: ta funkcja jest wiarygodna, w przeciwienstwie do mozliwosci
		   zwrocenia NULL przez config_var_get() <- poniewaz wartosc poprawna moze byc NULL
